name: Build and delivery a Gradle project
description: Build and delivery a Gradle project
branding:
  icon: 'box'
  color: 'green'

inputs:
  pre-build-command:
    description: 'A command to be executed before the build phase (but after configuring the JVM)'
    default: 'true'
    required: false
  build-command:
    description: 'The command executed in the build phase'
    default: './gradlew assemble --parallel || ./gradlew assemble --parallel'
    required: false
  check-command:
    description: 'The command executed in the check phase'
    default: './gradlew check --parallel || ./gradlew check --parallel'
    required: false
  clean-command:
    description: 'The command executed in the final clean phase'
    default: 'true'
    required: false
  enable-cache:
    description: 'True if the cache should be enabled'
    default: true
    required: false
  retries-on-failure:
    description: 'How many times every command should be retried before giving up'
    default: '2'
    required: false
  wait-between-retries:
    description: 'How many seconds to wait after a step failure before attempting a new run'
    default: '5'
    required: false
  codecov-directory:
    description: 'The location where CodeCov searches for coverage information'
    default: build
    required: false
  codecov-token:
    description: 'The codecov token for this repository'
    default: ""
    required: false
  deploy-command:
    description: 'The condition triggering a deploy run'
    default: "./gradlew publish --parallel"
    required: false
  gradle-termination-command:
    description: 'The command to terminate the gradle wrapper gracefully'
    default: "./gradlew --stop"
    required: false
  java-distribution:
    description: 'The Java distrbutor to use'
    default: "temurin"
    required: false
  java-version:
    description: 'The Java version to use'
    default: "21"
    required: false
  should-run-codecov:
    description: 'True if the action should send coverage results to codecov.io'
    default: true
    required: false
  should-deploy:
    description: 'True if the deploy operation should be executed'
    default: false
    required: false
  should-validate-wrapper:
    description: 'True if the wrapper should get validated before proceeding'
    default: true
    required: false
  maven-central-username:
    description: 'Username for Maven Central that will be exposed in the deployment step as the environment variables MAVEN_CENTRAL_PASSWORD and ORG_GRADLE_PROJECT_mavenUsername'
    required: false
  working-directory:
    description: 'Location where the repository should will be cloned'
    default: '.'
    required: false
  custom-secret-0:
    description: 'A custom secret that will be exposed in the deployment step as the environment variable CUSTOM_SECRET_0'
    default: ''
    required: false
  custom-secret-1:
    description: 'A custom secret that will be exposed in the deployment step as the environment variable CUSTOM_SECRET_1'
    default: ''
    required: false
  custom-secret-2:
    description: 'A custom secret that will be exposed in the deployment step as the environment variable CUSTOM_SECRET_2'
    default: ''
    required: false
  custom-secret-3:
    description: 'A custom secret that will be exposed in the deployment step as the environment variable CUSTOM_SECRET_3'
    default: ''
    required: false
  custom-secret-4:
    description: 'A custom secret that will be exposed in the deployment step as the environment variable CUSTOM_SECRET_4'
    default: ''
    required: false
  github-token:
    description: 'The GitHub token, it will be exposed in the deployment step as the environment variable GITHUB_TOKEN'
    required: false
  gradle-publish-secret:
    description: 'The Gradle Plugin Portal publish secret, it will be exposed in the deployment step as the environment variable GRADLE_PUBLISH_SECRET'
    required: false
  gradle-publish-key:
    description: 'The Gradle Plugin Portal publish key, it will be exposed in the deployment step as the environment variable GRADLE_PUBLISH_KEY'
    required: false
  maven-central-password:
    description: 'Password for OSSRH / Maven Central, it will be exposed in the deployment step as the environment variables MAVEN_CENTRAL_PASSWORD and ORG_GRADLE_PROJECT_mavenPassword'
    required: false
  maven-central-repo:
    description: 'URL for OSSRH / Maven Central Repository, it will be exposed in the deployment step as the environment variables MAVEN_CENTRAL_REPO and ORG_GRADLE_PROJECT_mavenRepo'
    required: false
    default: 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
  signing-key:
    description: 'ASCII-armored signing key, it will be exposed in the deployment step as the environment variable ORG_GRADLE_PROJECT_signingKey'
    required: false
  signing-password:
    description: 'Password for the signing key, it will be exposed in the deployment step as the environment variables ORG_GRADLE_PROJECT_signingPassword and SIGNING_PASSWORD'
    required: false
  npm-repo:
    description: 'URL for the NPM registry of choice, it will be exposed in the deployment step as the environment variable ORG_GRADLE_PROJECT_npmRepo'
    required: false
    default: 'https://registry.npmjs.org'
  npm-token:
    description: 'Authorization token for the NPM registry of choice, it will be exposed in the deployment step as the environment variable ORG_GRADLE_PROJECT_npmToken'
    required: false

runs:
  using: composite
  steps:
    - name: Validate the Gradle Wrapper
      if: inputs.should-validate-wrapper == 'true'
      uses: gradle/actions/wrapper-validation@v4.3.0
    - name: Setup Java
      uses: actions/setup-java@v4.7.0
      with:
        distribution: ${{ inputs.java-distribution }}
        java-version: ${{ inputs.java-version }}
        # Apache Maven Configuration
        server-id: ossrh
        server-username: MAVEN_CENTRAL_USERNAME
        server-password: MAVEN_CENTRAL_PASSWORD
        gpg-private-key: ${{ inputs.signing-key }}
        gpg-passphrase: SIGNING_PASSWORD
    - name: Configure the Windows Pagefile
      if: ${{ runner.os == 'Windows' }}
      uses: al-cheb/configure-pagefile-action@v1.4
      with:
        disk-root: 'C:'
    - name: Cache Gradle packages
      if: inputs.enable-cache == 'true'
      uses: burrunan/gradle-cache-action@v1.22
      with:
        build-root-directory: ${{ inputs.working-directory }}
    - name: Cache Konan native Kotlin compiler
      if: inputs.enable-cache == 'true'
      uses: actions/cache@v4.2.2
      with:
        path: "~/.konan"
        key: ${{ runner.os }}-konan-${{ hashFiles('**/gradle/**.versions.toml', '**/**.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-konan-
    - name: UUID generation
      id: uuid
      uses: danysk/uuid-action@2.0.1
    - name: Pre-build
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "::group::Pre-Build"
        # Strategy: create a file containing the step and prefixed with set -e

        # This is the file header
        echo "#!/bin/bash" > .${{ steps.uuid.outputs.uuid }}.sh
        echo "set -e" >> .${{ steps.uuid.outputs.uuid }}.sh

        # The file content is taken from the inputs. Note the single-quoted here-doc.
        cat <<'${{ steps.uuid.outputs.uuid }}' >> .${{ steps.uuid.outputs.uuid }}.sh
        ${{ inputs.pre-build-command }}
        ${{ steps.uuid.outputs.uuid }}

        # Make the file executable
        chmod +x .${{ steps.uuid.outputs.uuid }}.sh

        # Retry the command as needed
        for attempt in $(seq 1 "${{ inputs.retries-on-failure}}"); do
          echo "Attempt $attempt/${{ inputs.retries-on-failure }}"
          bash .${{ steps.uuid.outputs.uuid }}.sh && break || sleep "${{ inputs.wait-between-retries }}"
          if [ "$attempt" = "${{ inputs.retries-on-failure}}" ]; then false; fi
        done

        # Cleanup
        rm .${{ steps.uuid.outputs.uuid }}.sh
        echo "::endgroup::"
    - name: Build
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::Build"
        echo "#!/bin/bash" > .${{ steps.uuid.outputs.uuid }}.sh
        echo "set -e" >> .${{ steps.uuid.outputs.uuid }}.sh
        cat <<'${{ steps.uuid.outputs.uuid }}' >> .${{ steps.uuid.outputs.uuid }}.sh
        ${{ inputs.build-command }}
        ${{ steps.uuid.outputs.uuid }}
        chmod +x .${{ steps.uuid.outputs.uuid }}.sh
        for attempt in $(seq 1 "${{ inputs.retries-on-failure}}"); do
          echo "Attempt $attempt/${{ inputs.retries-on-failure }}"
          bash .${{ steps.uuid.outputs.uuid }}.sh && break || sleep "${{ inputs.wait-between-retries }}"
          if [ "$attempt" = "${{ inputs.retries-on-failure}}" ]; then false; fi
        done
        rm .${{ steps.uuid.outputs.uuid }}.sh
        echo "::endgroup::"
    - name: Check
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::Check"
        echo "#!/bin/bash" > .${{ steps.uuid.outputs.uuid }}.sh
        echo "set -e" >> .${{ steps.uuid.outputs.uuid }}.sh
        cat <<'${{ steps.uuid.outputs.uuid }}' >> .${{ steps.uuid.outputs.uuid }}.sh
        ${{ inputs.check-command }}
        ${{ steps.uuid.outputs.uuid }}
        chmod +x .${{ steps.uuid.outputs.uuid }}.sh
        for attempt in $(seq 1 "${{ inputs.retries-on-failure}}"); do
          echo "Attempt $attempt/${{ inputs.retries-on-failure }}"
          bash .${{ steps.uuid.outputs.uuid }}.sh && break || sleep "${{ inputs.wait-between-retries }}"
          if [ "$attempt" = "${{ inputs.retries-on-failure}}" ]; then false; fi
        done
        rm .${{ steps.uuid.outputs.uuid }}.sh
        echo "::endgroup::"
    - name: Check codecov token
      shell: bash
      if: inputs.should-run-codecov == 'true' && inputs.codecov-token == ''
      run: echo '::error title=Codecov enabled but no Codecov token provided::Please set the `codecov-token` input with the appropriate Codecov token'
    - name: CodeCov
      if: inputs.should-run-codecov == 'true'
      uses: codecov/codecov-action@v5.4.0
      with:
        directory: ${{ inputs.codecov-directory }}
        token: ${{ inputs.codecov-token }}
    - name: Deploy
      if: inputs.should-deploy == 'true'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      env:
        CUSTOM_SECRET_0: ${{ inputs.custom-secret-0 }}
        CUSTOM_SECRET_1: ${{ inputs.custom-secret-1 }}
        CUSTOM_SECRET_2: ${{ inputs.custom-secret-2 }}
        CUSTOM_SECRET_3: ${{ inputs.custom-secret-3 }}
        CUSTOM_SECRET_4: ${{ inputs.custom-secret-4 }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GRADLE_PUBLISH_SECRET: ${{ inputs.gradle-publish-secret }}
        GRADLE_PUBLISH_KEY: ${{ inputs.gradle-publish-key }}
        MAVEN_CENTRAL_PASSWORD: ${{ inputs.maven-central-password }}
        MAVEN_CENTRAL_USERNAME: ${{ inputs.maven-central-username }}
        SIGNING_PASSWORD: ${{ inputs.signing-password }}
        NPM_REPO: ${{ inputs.npm-repo }}
        NPM_TOKEN: ${{ inputs.npm-token }}
        # Gradle-specific exports, see:
        # https://docs.gradle.org/current/userguide/build_environment.html#sec:project_properties
        ORG_GRADLE_PROJECT_mavenCentralRepo: ${{ inputs.maven-central-repo }}
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ inputs.maven-central-username }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ inputs.maven-central-password }}
        ORG_GRADLE_PROJECT_signingKey: ${{ inputs.signing-key }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ inputs.signing-password }}
        ORG_GRADLE_PROJECT_npmRepo: ${{ inputs.npm-repo }}
        ORG_GRADLE_PROJECT_npmToken: ${{ inputs.npm-token }}
      run: |
        echo "::group::Deploy"
        echo "#!/bin/bash" > .${{ steps.uuid.outputs.uuid }}.sh
        echo "set -e" >> .${{ steps.uuid.outputs.uuid }}.sh
        cat <<'${{ steps.uuid.outputs.uuid }}' >> .${{ steps.uuid.outputs.uuid }}.sh
        ${{ inputs.deploy-command }}
        ${{ steps.uuid.outputs.uuid }}
        chmod +x .${{ steps.uuid.outputs.uuid }}.sh
        for attempt in $(seq 1 "${{ inputs.retries-on-failure}}"); do
          echo "Attempt $attempt/${{ inputs.retries-on-failure }}"
          bash .${{ steps.uuid.outputs.uuid }}.sh && break || sleep "${{ inputs.wait-between-retries }}"
          if [ "$attempt" = "${{ inputs.retries-on-failure}}" ]; then false; fi
        done
        rm .${{ steps.uuid.outputs.uuid }}.sh
        echo "::endgroup::"
    - name: Cleanup
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "::group::Cleanup"
        ${{ inputs.clean-command }}
        echo "::endgroup::"
    - name: Turn off the Gradle Daemon
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: ./gradlew --stop
    - name: Force-kill the remaining Gradle Daemons on Windows
      if: ${{ runner.os == 'Windows' }}
      shell: powershell
      run: |
        WMIC PROCESS where "Name like 'java%' AND CommandLine like '%GradleDaemon%'" Call Terminate
    - name: Cleanup the Gradle cache
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties
        rm -f ~/.gradle/jdks/*.lock
        rm -rf ~/.gradle/jdks/*/
    - name: Force the Gradle cleanup on Windows
      if: ${{ runner.os == 'Windows' }}
      shell: powershell
      run: |
        $files = "c:\Users\runneradmin\.gradle\caches\modules-2\modules-2.lock","c:\Users\runneradmin\.gradle\caches\modules-2\gc.properties"
        foreach ($file in $files) {
          if (Test-Path -Path $file -PathType Leaf) {
            Remove-Item -Force $file
          }
        }
        $jdkFolder = "c:\Users\runneradmin\.gradle\jdks\"
        if (Test-Path -Path $jdkFolder) {
          Get-ChildItem -Name $jdkFolder -Filter *.lock | Foreach-Object { Remove-Item -Force "c:\Users\runneradmin\.gradle\jdks\$_" }
        }
